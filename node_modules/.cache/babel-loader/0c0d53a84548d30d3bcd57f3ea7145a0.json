{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/Users/wcisco17/Documents/romeo/conet-finished-filed/frontend/pages/index.tsx\";\nimport { BandProtocolClient } from 'band.js';\nimport * as React from 'react';\nimport * as Web3 from 'web3';\nimport { Wrapper } from '../src/components/Container';\nimport Home from '../src/models';\nvar web3 = new Web3.default('http://127.0.0.1:7545');\nweb3.setProvider('http://127.0.0.1:7545');\n\nvar bandClient =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return BandProtocolClient.make({\n              provider: web3.currentProvider\n            });\n\n          case 2:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function bandClient() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar b = bandClient().then(\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(res) {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            return _context2.abrupt(\"return\", res);\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}());\nb.then(function (res) {\n  res.createCommunity({\n    name: \"Example Community\",\n    // ERC-20 community token name\n    symbol: \"XEC\",\n    // ERC-20 community token symbol\n    bonding: {\n      collateralEquation: [\"8\", \"1\", \"0\", \"2\"],\n      // x^2\n      liquiditySpread: \"30000000000000000\" // 3%\n\n    },\n    params: {\n      expirationTime: \"300\",\n      // 5 minutes\n      minParticipationPct: \"10000000000000000\",\n      // 1%\n      supportRequiredPct: \"800000000000000000\" // 80%\n\n    }\n  });\n});\nconsole.log(b);\nexport default (function (props) {\n  return React.createElement(Wrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(Home, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }));\n});","map":{"version":3,"sources":["/Users/wcisco17/Documents/romeo/conet-finished-filed/frontend/pages/index.tsx"],"names":["BandProtocolClient","React","Web3","Wrapper","Home","web3","default","setProvider","bandClient","make","provider","currentProvider","b","then","res","createCommunity","name","symbol","bonding","collateralEquation","liquiditySpread","params","expirationTime","minParticipationPct","supportRequiredPct","console","log","props"],"mappings":";;;AAAA,SAASA,kBAAT,QAAmC,SAAnC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAKC,IAAZ,MAAsB,MAAtB;AACA,SAASC,OAAT,QAAwB,6BAAxB;AACA,OAAOC,IAAP,MAAiB,eAAjB;AAEA,IAAMC,IAAI,GAAG,IAAIH,IAAI,CAACI,OAAT,CAAiB,uBAAjB,CAAb;AAEAD,IAAI,CAACE,WAAL,CAAiB,uBAAjB;;AAEA,IAAMC,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAkBR,kBAAkB,CAACS,IAAnB,CAAwB;AAAEC,cAAAA,QAAQ,EAAEL,IAAI,CAACM;AAAjB,aAAxB,CAAlB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAVH,UAAU;AAAA;AAAA;AAAA,GAAhB;;AAEA,IAAMI,CAAC,GAAGJ,UAAU,GAAGK,IAAb;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAkB,kBAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA,8CAAwBA,GAAxB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlB;;AAAA;AAAA;AAAA;AAAA,IAAV;AAEAF,CAAC,CAACC,IAAF,CAAO,UAACC,GAAD,EAAS;AACZA,EAAAA,GAAG,CAACC,eAAJ,CAAoB;AAChBC,IAAAA,IAAI,EAAE,mBADU;AACW;AAC3BC,IAAAA,MAAM,EAAE,KAFQ;AAED;AACfC,IAAAA,OAAO,EAAE;AACLC,MAAAA,kBAAkB,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,CADf;AACqC;AAC1CC,MAAAA,eAAe,EAAE,mBAFZ,CAEgC;;AAFhC,KAHO;AAOhBC,IAAAA,MAAM,EAAE;AACJC,MAAAA,cAAc,EAAE,KADZ;AACmB;AACvBC,MAAAA,mBAAmB,EAAE,mBAFjB;AAEsC;AAC1CC,MAAAA,kBAAkB,EAAE,oBAHhB,CAGqC;;AAHrC;AAPQ,GAApB;AAaH,CAdD;AAeAC,OAAO,CAACC,GAAR,CAAYd,CAAZ;AAEA,gBAAe,UAACe,KAAD,EAAiC;AAE5C,SACI,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAKH,CAPD","sourcesContent":["import { BandProtocolClient } from 'band.js';\nimport * as React from 'react';\nimport * as Web3 from 'web3';\nimport { Wrapper } from '../src/components/Container';\nimport Home from '../src/models';\n\nconst web3 = new Web3.default('http://127.0.0.1:7545');\n\nweb3.setProvider('http://127.0.0.1:7545')\n\nconst bandClient = async () => await BandProtocolClient.make({ provider: web3.currentProvider, });\n\nconst b = bandClient().then(async (res) => { return res; });\n\nb.then((res) => {\n    res.createCommunity({\n        name: \"Example Community\", // ERC-20 community token name\n        symbol: \"XEC\", // ERC-20 community token symbol\n        bonding: {\n            collateralEquation: [\"8\", \"1\", \"0\", \"2\"], // x^2\n            liquiditySpread: \"30000000000000000\" // 3%\n        },\n        params: {\n            expirationTime: \"300\", // 5 minutes\n            minParticipationPct: \"10000000000000000\", // 1%\n            supportRequiredPct: \"800000000000000000\" // 80%\n        }\n    })\n})\nconsole.log(b);\n\nexport default (props: any): React.ReactNode => {\n\n    return (\n        <Wrapper>\n            <Home />\n        </Wrapper>\n    );\n}"]},"metadata":{},"sourceType":"module"}