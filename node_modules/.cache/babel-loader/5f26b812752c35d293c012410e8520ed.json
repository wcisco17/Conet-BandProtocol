{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/wcisco17/Documents/romeo/conet-finished-filed/frontend/src/models/index.tsx\";\nimport { BandProtocolClient } from 'band.js';\nimport * as React from 'react';\nimport { Fragment, useEffect, useState } from 'react';\nimport { OnBoardOne, OnBoardTwo } from './Home';\n\nvar useBandClient = function useBandClient(clients) {\n  var _useState = useState(clients),\n      _useState2 = _slicedToArray(_useState, 2),\n      client = _useState2[0],\n      setClient = _useState2[1];\n\n  useEffect(function () {\n    loadBandProtocol();\n  }, []);\n\n  var loadBandProtocol =\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var bandClient;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return BandProtocolClient.make({\n                provider: window.web3.currentProvider\n              });\n\n            case 2:\n              bandClient = _context.sent;\n              setClient(bandClient);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function loadBandProtocol() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return {\n    client: client\n  };\n};\n\nexport default\n/*#__PURE__*/\n_asyncToGenerator(\n/*#__PURE__*/\n_regeneratorRuntime.mark(function _callee2() {\n  var _useState3, _useState4, boarding, setOnboarding, _useBandClient, createCommunity;\n\n  return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _useState3 = useState(1), _useState4 = _slicedToArray(_useState3, 2), boarding = _useState4[0], setOnboarding = _useState4[1];\n          _useBandClient = useBandClient({}), createCommunity = _useBandClient.client.createCommunity;\n          _context2.next = 4;\n          return createCommunity({\n            name: \"Example Community\",\n            // ERC-20 community token name\n            symbol: \"XEC\",\n            // ERC-20 community token symbol\n            bonding: {\n              collateralEquation: [\"8\", \"1\", \"0\", \"2\"],\n              // x^2\n              liquiditySpread: \"30000000000000000\" // 3%\n\n            },\n            params: {\n              expirationTime: \"300\",\n              // 5 minutes\n              minParticipationPct: \"10000000000000000\",\n              // 1%\n              supportRequiredPct: \"800000000000000000\" // 80%\n\n            }\n          }).then(function (res) {\n            console.log(res);\n          });\n\n        case 4:\n          return _context2.abrupt(\"return\", React.createElement(Fragment, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 45\n            },\n            __self: this\n          }, boarding === 1 && React.createElement(OnBoardOne, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 48\n            },\n            __self: this\n          }), boarding === 2 && React.createElement(OnBoardTwo, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 54\n            },\n            __self: this\n          })));\n\n        case 5:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _callee2, this);\n}));","map":{"version":3,"sources":["/Users/wcisco17/Documents/romeo/conet-finished-filed/frontend/src/models/index.tsx"],"names":["BandProtocolClient","React","Fragment","useEffect","useState","OnBoardOne","OnBoardTwo","useBandClient","clients","client","setClient","loadBandProtocol","make","provider","window","web3","currentProvider","bandClient","boarding","setOnboarding","createCommunity","name","symbol","bonding","collateralEquation","liquiditySpread","params","expirationTime","minParticipationPct","supportRequiredPct","then","res","console","log"],"mappings":";;;;AAAA,SAASA,kBAAT,QAAmC,SAAnC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,EAAmBC,SAAnB,EAA8BC,QAA9B,QAA8C,OAA9C;AACA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,QAAvC;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,OAAD,EAAkB;AAAA,kBACRJ,QAAQ,CAAqBI,OAArB,CADA;AAAA;AAAA,MAC7BC,MAD6B;AAAA,MACrBC,SADqB;;AAGpCP,EAAAA,SAAS,CAAC,YAAM;AACZQ,IAAAA,gBAAgB;AACnB,GAFQ,EAEN,EAFM,CAAT;;AAIA,MAAMA,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACIX,kBAAkB,CAACY,IAAnB,CAAwB;AAAEC,gBAAAA,QAAQ,EAAEC,MAAM,CAACC,IAAP,CAAYC;AAAxB,eAAxB,CADJ;;AAAA;AACfC,cAAAA,UADe;AAErBP,cAAAA,SAAS,CAACO,UAAD,CAAT;;AAFqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAhBN,gBAAgB;AAAA;AAAA;AAAA,KAAtB;;AAKA,SAAO;AACHF,IAAAA,MAAM,EAANA;AADG,GAAP;AAGH,CAfD;;AAiBA;AAAA;AAAA;AAAA;AAAA,yBAAe;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,uBACuBL,QAAQ,CAAC,CAAD,CAD/B,8CACJc,QADI,kBACMC,aADN;AAAA,2BAE6BZ,aAAa,CAAC,EAAD,CAF1C,EAEOa,eAFP,kBAEHX,MAFG,CAEOW,eAFP;AAAA;AAAA,iBAILA,eAAe,CAAC;AAClBC,YAAAA,IAAI,EAAE,mBADY;AACS;AAC3BC,YAAAA,MAAM,EAAE,KAFU;AAEH;AACfC,YAAAA,OAAO,EAAE;AACPC,cAAAA,kBAAkB,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,CADb;AACmC;AAC1CC,cAAAA,eAAe,EAAE,mBAFV,CAE8B;;AAF9B,aAHS;AAOlBC,YAAAA,MAAM,EAAE;AACNC,cAAAA,cAAc,EAAE,KADV;AACiB;AACvBC,cAAAA,mBAAmB,EAAE,mBAFf;AAEoC;AAC1CC,cAAAA,kBAAkB,EAAE,oBAHd,CAGmC;;AAHnC;AAPU,WAAD,CAAf,CAaLC,IAbK,CAaA,UAACC,GAAD,EAAc;AAChBC,YAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACH,WAfK,CAJK;;AAAA;AAAA,4CAsBP,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAEQb,QAAQ,KAAK,CAAb,IACI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHZ,EAQQA,QAAQ,KAAK,CAAb,IACI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YATZ,CAtBO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAf","sourcesContent":["import { BandProtocolClient } from 'band.js';\nimport * as React from 'react';\nimport { Fragment, useEffect, useState } from 'react';\nimport { OnBoardOne, OnBoardTwo } from './Home';\n\nconst useBandClient = (clients: any) => {\n    const [client, setClient] = useState<BandProtocolClient>(clients);\n\n    useEffect(() => {\n        loadBandProtocol()\n    }, []);\n\n    const loadBandProtocol = async () => {\n        const bandClient = await BandProtocolClient.make({ provider: window.web3.currentProvider, });\n        setClient(bandClient);\n    }\n    \n    return {\n        client,\n    }\n}\n\nexport default async () => {\n    const [boarding, setOnboarding] = useState(1);\n    const { client: { createCommunity } } = useBandClient({})\n\n    await createCommunity({\n        name: \"Example Community\", // ERC-20 community token name\n        symbol: \"XEC\", // ERC-20 community token symbol\n        bonding: {\n          collateralEquation: [\"8\", \"1\", \"0\", \"2\"], // x^2\n          liquiditySpread: \"30000000000000000\" // 3%\n        },\n        params: {\n          expirationTime: \"300\", // 5 minutes\n          minParticipationPct: \"10000000000000000\", // 1%\n          supportRequiredPct: \"800000000000000000\" // 80%\n        }\n    })    \n    .then((res: any) => {\n        console.log(res)\n    })\n\n    return (\n        <Fragment>\n            {\n                boarding === 1 && (\n                    <OnBoardOne />\n                )\n            }\n\n            {\n                boarding === 2 && (\n                    <OnBoardTwo />\n                )\n            }\n        </Fragment>\n    )\n}"]},"metadata":{},"sourceType":"module"}