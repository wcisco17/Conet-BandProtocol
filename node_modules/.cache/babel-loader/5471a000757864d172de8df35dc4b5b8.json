{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport { BandProtocolClient } from 'band.js';\nimport { useEffect, useState } from 'react';\nexport var useCreateCommunity = function useCreateCommunity(clients, communityTitle, communitySymbol) {\n  var _useState = useState(clients),\n      _useState2 = _slicedToArray(_useState, 2),\n      community = _useState2[0],\n      setCommunity = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      title = _useState4[0],\n      setTitle = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      symbol = _useState6[0],\n      setSymbol = _useState6[1];\n\n  var bandProtocolCreateCommunity =\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var bandClient, communityClient;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return BandProtocolClient.make({\n                provider: window.web3.currentProvider\n              });\n\n            case 2:\n              bandClient = _context.sent;\n              _context.next = 5;\n              return bandClient.createCommunity({\n                name: title,\n                symbol: symbol,\n                bonding: {\n                  collateralEquation: [\"8\", \"1\", \"0\", \"2\"],\n                  liquiditySpread: \"30000000000000000\"\n                },\n                params: {\n                  expirationTime: \"300\",\n                  minParticipationPct: \"10000000000000000\",\n                  supportRequiredPct: \"800000000000000000\"\n                }\n              });\n\n            case 5:\n              communityClient = _context.sent;\n              setTitle(communityTitle);\n              setSymbol(communitySymbol);\n              setCommunity(communityClient);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function bandProtocolCreateCommunity() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    bandProtocolCreateCommunity();\n  }, []);\n  return {\n    community: community\n  };\n};","map":{"version":3,"sources":["/Users/wcisco17/Documents/romeo/conet-finished-filed/frontend/src/assets/helper/index.tsx"],"names":["BandProtocolClient","useEffect","useState","useCreateCommunity","clients","communityTitle","communitySymbol","community","setCommunity","title","setTitle","symbol","setSymbol","bandProtocolCreateCommunity","make","provider","window","web3","currentProvider","bandClient","createCommunity","name","bonding","collateralEquation","liquiditySpread","params","expirationTime","minParticipationPct","supportRequiredPct","communityClient"],"mappings":";;;AAAA,SAASA,kBAAT,QAAmC,SAAnC;AAEA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,OAAD,EAAeC,cAAf,EAAuCC,eAAvC,EAAmE;AAAA,kBAC/DJ,QAAQ,CAAkBE,OAAlB,CADuD;AAAA;AAAA,MAC1FG,SAD0F;AAAA,MAC/EC,YAD+E;;AAAA,mBAEvEN,QAAQ,CAAC,EAAD,CAF+D;AAAA;AAAA,MAE1FO,KAF0F;AAAA,MAEnFC,QAFmF;;AAAA,mBAGrER,QAAQ,CAAC,EAAD,CAH6D;AAAA;AAAA,MAG1FS,MAH0F;AAAA,MAGlFC,SAHkF;;AAKjG,MAAMC,2BAA2B;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEPb,kBAAkB,CAACc,IAAnB,CAAwB;AAAEC,gBAAAA,QAAQ,EAAEC,MAAM,CAACC,IAAP,CAAYC;AAAxB,eAAxB,CAFO;;AAAA;AAE1BC,cAAAA,UAF0B;AAAA;AAAA,qBAKFA,UAAU,CAACC,eAAX,CAA2B;AACrDC,gBAAAA,IAAI,EAAEZ,KAD+C;AAErDE,gBAAAA,MAAM,EAAEA,MAF6C;AAGrDW,gBAAAA,OAAO,EAAE;AACLC,kBAAAA,kBAAkB,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,CADf;AAELC,kBAAAA,eAAe,EAAE;AAFZ,iBAH4C;AAOrDC,gBAAAA,MAAM,EAAE;AACJC,kBAAAA,cAAc,EAAE,KADZ;AAEJC,kBAAAA,mBAAmB,EAAE,mBAFjB;AAGJC,kBAAAA,kBAAkB,EAAE;AAHhB;AAP6C,eAA3B,CALE;;AAAA;AAK1BC,cAAAA,eAL0B;AAmBhCnB,cAAAA,QAAQ,CAACL,cAAD,CAAR;AACAO,cAAAA,SAAS,CAACN,eAAD,CAAT;AACAE,cAAAA,YAAY,CAACqB,eAAD,CAAZ;;AArBgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAA3BhB,2BAA2B;AAAA;AAAA;AAAA,KAAjC;;AAwBAZ,EAAAA,SAAS,CAAC,YAAM;AACZY,IAAAA,2BAA2B;AAC9B,GAFQ,EAEN,EAFM,CAAT;AAIA,SAAO;AACHN,IAAAA,SAAS,EAATA;AADG,GAAP;AAGH,CApCM","sourcesContent":["import { BandProtocolClient } from 'band.js';\nimport CommunityClient from 'band.js/dist/services/CommunityClient';\nimport { useEffect, useState } from 'react';\n\nexport const useCreateCommunity = (clients: any, communityTitle: string, communitySymbol: string) => {\n    const [community, setCommunity] = useState<CommunityClient>(clients);\n    const [title, setTitle] = useState('');\n    const [symbol, setSymbol] = useState('');\n\n    const bandProtocolCreateCommunity = async (): Promise<any> => {\n        // Set Protocol Provider\n        const bandClient = await BandProtocolClient.make({ provider: window.web3.currentProvider, });\n\n        // Create community client\n        const communityClient = await bandClient.createCommunity({\n            name: title,\n            symbol: symbol,\n            bonding: {\n                collateralEquation: [\"8\", \"1\", \"0\", \"2\"],\n                liquiditySpread: \"30000000000000000\"\n            },\n            params: {\n                expirationTime: \"300\",\n                minParticipationPct: \"10000000000000000\",\n                supportRequiredPct: \"800000000000000000\"\n            }\n        });\n\n        setTitle(communityTitle);\n        setSymbol(communitySymbol);\n        setCommunity(communityClient);\n    }\n\n    useEffect(() => {\n        bandProtocolCreateCommunity()\n    }, []);\n\n    return {\n        community\n    }\n}\n"]},"metadata":{},"sourceType":"module"}