import BN from 'bn.js';
import Web3 from 'web3';
import axios from 'axios';
import delay from 'delay';
import BigNumber from 'bignumber.js';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

function __awaiter(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var InternalUtils = /** @class */ (function () {
    function InternalUtils() {
    }
    InternalUtils.throw = function (m) {
        throw new Error(m);
    };
    InternalUtils.circularStringify = function (o) {
        var cache = [];
        JSON.stringify(o, function (_, value) {
            if (typeof value === 'object' && value !== null) {
                if (cache.indexOf(value) !== -1) {
                    // Duplicate reference found
                    try {
                        // If this value does not reference a parent it can be deduped
                        return JSON.parse(JSON.stringify(value));
                    }
                    catch (error) {
                        // discard key if value cannot be deduped
                        return;
                    }
                }
                // Store value in our collection
                cache.push(value);
            }
            return value;
        });
        cache = null;
    };
    InternalUtils.getRequest = function (path, params) {
        return __awaiter(this, void 0, void 0, function () {
            var url, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = InternalUtils.API + path;
                        return [4 /*yield*/, axios.get(url, { params: params })];
                    case 1:
                        response = _a.sent();
                        if (response.data.message !== undefined) {
                            throw new Error(response.data.message);
                        }
                        return [2 /*return*/, response.data.result];
                }
            });
        });
    };
    InternalUtils.postRequest = function (path, data) {
        return __awaiter(this, void 0, void 0, function () {
            var url, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = InternalUtils.API + path;
                        return [4 /*yield*/, axios.post(url, data)];
                    case 1:
                        response = _a.sent();
                        if (response.data.message !== undefined) {
                            throw new Error(response.data.message);
                        }
                        return [2 /*return*/, response.data.result];
                }
            });
        });
    };
    InternalUtils.graphqlRequest = function (query) {
        return __awaiter(this, void 0, void 0, function () {
            var response, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, axios.post(InternalUtils.GRAPH_QL_API, {
                            query: query,
                        })];
                    case 1:
                        response = _a.sent();
                        if (response.status !== 200) {
                            throw new Error(response.statusText);
                        }
                        data = response.data.data;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    InternalUtils.signMessage = function (web3, message, sender) {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, web3.eth.personal.sign(message, sender, '')];
                    case 1: return [2 /*return*/, _b.sent()];
                    case 2:
                        _a = _b.sent();
                        console.log('Cannot sign by web3');
                        return [2 /*return*/, this.throw('Cannot sign a message')];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    InternalUtils.API = 'https://api-wip.rinkeby.bandprotocol.com';
    InternalUtils.GRAPH_QL_API = 'https://graphql.bandprotocol.com/graphql';
    return InternalUtils;
}());

var Transaction = /** @class */ (function () {
    // private isFeelessable: boolean
    // private lastTimestamp?: number
    function Transaction(web3, sender, to, data) {
        this.web3 = web3;
        this.sender = sender;
        this.to = to;
        this.data = data;
        // this.isFeelessable = isFeelessable
        // this.lastTimestamp = lastTimestamp
    }
    Transaction.prototype.getTxDetail = function () {
        return {
            sender: this.sender,
            to: this.to,
            data: this.data,
        };
    };
    Transaction.prototype.send = function () {
        return this.web3.eth.sendTransaction({
            from: this.sender,
            to: this.to,
            data: this.data,
        });
    };
    Transaction.prototype.sendFeeless = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        _this.web3.eth
                            .sendTransaction({
                            from: _this.sender,
                            to: _this.to,
                            data: _this.data,
                        })
                            .once('transactionHash', function (txHash) { return resolve(txHash); })
                            .once('error', function (error) { return reject(error); });
                    })];
            });
        });
    };
    return Transaction;
}());

// import { TransactionReceipt } from 'web3-core/types'
/**
 * This is a BaseClient Class
 */
var BaseClient = /** @class */ (function () {
    function BaseClient(web3) {
        this.web3 = web3;
    }
    BaseClient.prototype.getAccount = function () {
        return __awaiter(this, void 0, void 0, function () {
            var account;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.web3 === undefined)
                            return [2 /*return*/, InternalUtils.throw('Required provider.')];
                        return [4 /*yield*/, this.web3.eth.getAccounts()];
                    case 1:
                        account = (_a.sent())[0];
                        if (!account)
                            return [2 /*return*/, InternalUtils.throw('Cannot get account.')];
                        return [2 /*return*/, account];
                }
            });
        });
    };
    BaseClient.prototype.isLogin = function () {
        return this.web3 !== undefined;
    };
    BaseClient.prototype.createTransaction = function (to, data) {
        return __awaiter(this, void 0, void 0, function () {
            var sender;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.web3 === undefined)
                            return [2 /*return*/, InternalUtils.throw('Required provider.')];
                        return [4 /*yield*/, this.getAccount()];
                    case 1:
                        sender = _a.sent();
                        return [2 /*return*/, new Transaction(this.web3, sender, to, data)];
                }
            });
        });
    };
    return BaseClient;
}());

var ParameterClient = /** @class */ (function (_super) {
    __extends(ParameterClient, _super);
    function ParameterClient(coreAddress, web3) {
        var _this = _super.call(this, web3) || this;
        _this.coreAddress = coreAddress;
        return _this;
    }
    ParameterClient.prototype.createProposalTransaction = function (reasonHash, keys, values) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, tokenAddress, data;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.postRequestParameter('/propose', {
                            reasonHash: reasonHash,
                            keys: keys,
                            values: values.map(function (e) { return (BN.isBN(e) ? e.toString() : e); }),
                        })];
                    case 1:
                        _a = _b.sent(), tokenAddress = _a.to, data = _a.data;
                        return [2 /*return*/, this.createTransaction(tokenAddress, data)];
                }
            });
        });
    };
    ParameterClient.prototype.createCastVoteTransaction = function (proposalId, isAccepted) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, to, data;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.postRequestParameter("/" + proposalId + "/vote", {
                            accepted: isAccepted,
                        })];
                    case 1:
                        _a = _b.sent(), to = _a.to, data = _a.data;
                        return [2 /*return*/, this.createTransaction(to, data)];
                }
            });
        });
    };
    ParameterClient.prototype.postRequestParameter = function (path, data) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, InternalUtils.postRequest("/parameter/" + this.coreAddress + path, data)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return ParameterClient;
}(BaseClient));

var TCRClient = /** @class */ (function (_super) {
    __extends(TCRClient, _super);
    function TCRClient(tcrAddress, web3) {
        var _this = _super.call(this, web3) || this;
        _this.tcrAddress = tcrAddress;
        return _this;
    }
    TCRClient.prototype.createApplyTransaction = function (_a) {
        var dataHash = _a.dataHash, amount = _a.amount;
        return __awaiter(this, void 0, void 0, function () {
            var _b, to, data;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4 /*yield*/, this.postRequestTCR('/entries', {
                            dataHash: dataHash,
                            deposit: BN.isBN(amount) ? amount.toString() : amount,
                        })];
                    case 1:
                        _b = _c.sent(), to = _b.to, data = _b.data;
                        return [2 /*return*/, this.createTransaction(to, data)];
                }
            });
        });
    };
    TCRClient.prototype.createDepositTransaction = function (_a) {
        var dataHash = _a.dataHash, amount = _a.amount;
        return __awaiter(this, void 0, void 0, function () {
            var _b, to, data;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4 /*yield*/, this.postRequestTCR('/deposit', {
                            dataHash: dataHash,
                            amount: BN.isBN(amount) ? amount.toString() : amount,
                        })];
                    case 1:
                        _b = _c.sent(), to = _b.to, data = _b.data;
                        return [2 /*return*/, this.createTransaction(to, data)];
                }
            });
        });
    };
    TCRClient.prototype.createWithdrawTransaction = function (_a) {
        var dataHash = _a.dataHash, amount = _a.amount;
        return __awaiter(this, void 0, void 0, function () {
            var _b, to, data;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4 /*yield*/, this.postRequestTCR('/withdraw', {
                            dataHash: dataHash,
                            amount: BN.isBN(amount) ? amount.toString() : amount,
                        })];
                    case 1:
                        _b = _c.sent(), to = _b.to, data = _b.data;
                        return [2 /*return*/, this.createTransaction(to, data)];
                }
            });
        });
    };
    TCRClient.prototype.createChallengeTransaction = function (_a) {
        var entryHash = _a.entryHash, reasonHash = _a.reasonHash, amount = _a.amount;
        return __awaiter(this, void 0, void 0, function () {
            var _b, to, data;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4 /*yield*/, this.postRequestTCR('/challenge', {
                            entryHash: entryHash,
                            reasonHash: reasonHash,
                            amount: BN.isBN(amount) ? amount.toString() : amount,
                        })];
                    case 1:
                        _b = _c.sent(), to = _b.to, data = _b.data;
                        return [2 /*return*/, this.createTransaction(to, data)];
                }
            });
        });
    };
    TCRClient.prototype.createExitTransaction = function (dataHash) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, to, data;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.postRequestTCR('/exit', {
                            dataHash: dataHash,
                        })];
                    case 1:
                        _a = _b.sent(), to = _a.to, data = _a.data;
                        return [2 /*return*/, this.createTransaction(to, data)];
                }
            });
        });
    };
    TCRClient.prototype.createCommitVoteTransaction = function (_a) {
        var challengeId = _a.challengeId, commitHash = _a.commitHash;
        return __awaiter(this, void 0, void 0, function () {
            var _b, to, data;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4 /*yield*/, this.postRequestTCR("/" + challengeId + "/commit-vote", {
                            commitHash: commitHash,
                        })];
                    case 1:
                        _b = _c.sent(), to = _b.to, data = _b.data;
                        return [2 /*return*/, this.createTransaction(to, data)];
                }
            });
        });
    };
    TCRClient.prototype.createRevealVoteTransaction = function (_a) {
        var challengeId = _a.challengeId, voteKeep = _a.voteKeep, salt = _a.salt;
        return __awaiter(this, void 0, void 0, function () {
            var _b, to, data, _c, _d, _e;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        _c = this.postRequestTCR;
                        _d = ["/" + challengeId + "/reveal-vote"];
                        _e = {};
                        return [4 /*yield*/, this.getAccount()];
                    case 1: return [4 /*yield*/, _c.apply(this, _d.concat([(_e.voter = _f.sent(),
                                _e.voteKeep = voteKeep,
                                _e.salt = BN.isBN(salt) ? salt.toString() : salt,
                                _e)]))];
                    case 2:
                        _b = _f.sent(), to = _b.to, data = _b.data;
                        return [2 /*return*/, this.createTransaction(to, data)];
                }
            });
        });
    };
    TCRClient.prototype.createClaimRewardTransaction = function (challengeId) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, to, data, _b, _c, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        _b = this.postRequestTCR;
                        _c = ['/claim-reward'];
                        _d = {};
                        return [4 /*yield*/, this.getAccount()];
                    case 1: return [4 /*yield*/, _b.apply(this, _c.concat([(_d.rewardOwner = _e.sent(),
                                _d.challengeId = challengeId,
                                _d)]))];
                    case 2:
                        _a = _e.sent(), to = _a.to, data = _a.data;
                        return [2 /*return*/, this.createTransaction(to, data)];
                }
            });
        });
    };
    TCRClient.prototype.getMinDeposit = function (entryHash) {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = BN.bind;
                        return [4 /*yield*/, this.getRequestTCR("/" + entryHash + "/min-deposit", {})];
                    case 1: return [2 /*return*/, new (_a.apply(BN, [void 0, (_b.sent()).minDeposit]))()];
                }
            });
        });
    };
    TCRClient.prototype.getRequestTCR = function (path, params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, InternalUtils.getRequest("/tcr/" + this.tcrAddress + path, params)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    TCRClient.prototype.postRequestTCR = function (path, data) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, InternalUtils.postRequest("/tcr/" + this.tcrAddress + path, data)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    TCRClient.prototype.createSalt = function (challengeId) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, _c, _d, _e, _f;
            return __generator(this, function (_g) {
                switch (_g.label) {
                    case 0:
                        if (this.web3 === undefined)
                            return [2 /*return*/, InternalUtils.throw('Required provider.')];
                        _a = BN.bind;
                        _c = (_b = this.web3.utils).soliditySha3;
                        _e = (_d = InternalUtils).signMessage;
                        _f = [this.web3,
                            this.web3.utils.asciiToHex("salt:" + this.tcrAddress + ":" + challengeId)];
                        return [4 /*yield*/, this.getAccount()];
                    case 1: return [4 /*yield*/, _e.apply(_d, _f.concat([_g.sent()]))];
                    case 2: return [2 /*return*/, new (_a.apply(BN, [void 0, _c.apply(_b, [_g.sent()])
                                .slice(2),
                            'hex']))()];
                }
            });
        });
    };
    return TCRClient;
}(BaseClient));

var DDSClient = /** @class */ (function (_super) {
    __extends(DDSClient, _super);
    function DDSClient(ddsAddress, web3) {
        var _this = _super.call(this, web3) || this;
        _this.ddsAddress = ddsAddress;
        return _this;
    }
    DDSClient.prototype.createRegisterDataSourceTransaction = function (_a) {
        var dataSource = _a.dataSource, stake = _a.stake;
        return __awaiter(this, void 0, void 0, function () {
            var _b, to, data;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4 /*yield*/, this.postRequestTCR('/register', {
                            dataSource: dataSource,
                            stake: BN.isBN(stake) ? stake.toString() : stake,
                        })];
                    case 1:
                        _b = _c.sent(), to = _b.to, data = _b.data;
                        return [2 /*return*/, this.createTransaction(to, data)];
                }
            });
        });
    };
    DDSClient.prototype.createVoteDataSourceTransaction = function (_a) {
        var dataSource = _a.dataSource, stake = _a.stake;
        return __awaiter(this, void 0, void 0, function () {
            var _b, to, data;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4 /*yield*/, this.postRequestTCR('/vote', {
                            dataSource: dataSource,
                            stake: BN.isBN(stake) ? stake.toString() : stake,
                        })];
                    case 1:
                        _b = _c.sent(), to = _b.to, data = _b.data;
                        return [2 /*return*/, this.createTransaction(to, data)];
                }
            });
        });
    };
    DDSClient.prototype.createWithdrawDataSourceTransaction = function (_a) {
        var dataSource = _a.dataSource, withdrawOwnership = _a.withdrawOwnership;
        return __awaiter(this, void 0, void 0, function () {
            var _b, to, data;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4 /*yield*/, this.postRequestTCR('/withdraw', {
                            dataSource: dataSource,
                            withdrawOwnership: BN.isBN(withdrawOwnership)
                                ? withdrawOwnership.toString()
                                : withdrawOwnership,
                        })];
                    case 1:
                        _b = _c.sent(), to = _b.to, data = _b.data;
                        return [2 /*return*/, this.createTransaction(to, data)];
                }
            });
        });
    };
    DDSClient.prototype.createKickDataSourceTransaction = function (dataSource) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, to, data;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.postRequestTCR('/kick', {
                            dataSource: dataSource,
                        })];
                    case 1:
                        _a = _b.sent(), to = _a.to, data = _a.data;
                        return [2 /*return*/, this.createTransaction(to, data)];
                }
            });
        });
    };
    DDSClient.prototype.createDistributeFeeTransaction = function (tokenAmount) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, to, data;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.postRequestTCR('/distribute-fee', {
                            amount: BN.isBN(tokenAmount) ? tokenAmount.toString() : tokenAmount,
                        })];
                    case 1:
                        _a = _b.sent(), to = _a.to, data = _a.data;
                        return [2 /*return*/, this.createTransaction(to, data)];
                }
            });
        });
    };
    DDSClient.prototype.postRequestTCR = function (path, data) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, InternalUtils.postRequest("/data/" + this.ddsAddress + path, data)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return DDSClient;
}(BaseClient));

var CommunityClient = /** @class */ (function (_super) {
    __extends(CommunityClient, _super);
    function CommunityClient(coreAddress, web3) {
        var _this = _super.call(this, web3) || this;
        _this.coreAddress = coreAddress;
        return _this;
    }
    CommunityClient.prototype.getBuyPrice = function (amount) {
        return __awaiter(this, void 0, void 0, function () {
            var amountString, url, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        amountString = BN.isBN(amount) ? amount.toString() : amount;
                        url = "/buy-price/" + amountString;
                        _a = BN.bind;
                        return [4 /*yield*/, this.getRequestDApps(url)];
                    case 1: return [2 /*return*/, new (_a.apply(BN, [void 0, (_b.sent()).price]))()];
                }
            });
        });
    };
    CommunityClient.prototype.getSellPrice = function (amount) {
        return __awaiter(this, void 0, void 0, function () {
            var amountString, url, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        amountString = BN.isBN(amount) ? amount.toString() : amount;
                        url = "/sell-price/" + amountString;
                        _a = BN.bind;
                        return [4 /*yield*/, this.getRequestDApps(url)];
                    case 1: return [2 /*return*/, new (_a.apply(BN, [void 0, (_b.sent()).price]))()];
                }
            });
        });
    };
    CommunityClient.prototype.createTransferTransaction = function (_a) {
        var to = _a.to, value = _a.value;
        return __awaiter(this, void 0, void 0, function () {
            var valueString, _b, tokenAddress, data;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        valueString = BN.isBN(value) ? value.toString() : value;
                        return [4 /*yield*/, this.postRequestDApps('/transfer', {
                                to: to,
                                value: valueString,
                            })];
                    case 1:
                        _b = _c.sent(), tokenAddress = _b.to, data = _b.data;
                        return [2 /*return*/, this.createTransaction(tokenAddress, data)];
                }
            });
        });
    };
    CommunityClient.prototype.createBuyTransaction = function (_a) {
        var amount = _a.amount, priceLimit = _a.priceLimit;
        return __awaiter(this, void 0, void 0, function () {
            var amountString, priceLimitString, _b, tokenAddress, data;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        amountString = BN.isBN(amount) ? amount.toString() : amount;
                        priceLimitString = BN.isBN(priceLimit)
                            ? priceLimit.toString()
                            : priceLimit;
                        return [4 /*yield*/, this.postRequestDApps('/buy', {
                                value: amountString,
                                priceLimit: priceLimitString,
                            })];
                    case 1:
                        _b = _c.sent(), tokenAddress = _b.to, data = _b.data;
                        return [2 /*return*/, this.createTransaction(tokenAddress, data)];
                }
            });
        });
    };
    CommunityClient.prototype.createSellTransaction = function (_a) {
        var amount = _a.amount, priceLimit = _a.priceLimit;
        return __awaiter(this, void 0, void 0, function () {
            var amountString, priceLimitString, _b, tokenAddress, data;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        amountString = BN.isBN(amount) ? amount.toString() : amount;
                        priceLimitString = BN.isBN(priceLimit)
                            ? priceLimit.toString()
                            : priceLimit;
                        return [4 /*yield*/, this.postRequestDApps('/sell', {
                                value: amountString,
                                priceLimit: priceLimitString,
                            })];
                    case 1:
                        _b = _c.sent(), tokenAddress = _b.to, data = _b.data;
                        return [2 /*return*/, this.createTransaction(tokenAddress, data)];
                }
            });
        });
    };
    CommunityClient.prototype.createProposeTransaction = function (_a) {
        var reasonHash = _a.reasonHash, keys = _a.keys, values = _a.values;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_b) {
                return [2 /*return*/, this.parameter().createProposalTransaction(reasonHash, keys, values)];
            });
        });
    };
    CommunityClient.prototype.createProposalVoteTransaction = function (_a) {
        var proposalId = _a.proposalId, isAccepted = _a.isAccepted;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_b) {
                return [2 /*return*/, this.parameter().createCastVoteTransaction(proposalId, isAccepted)];
            });
        });
    };
    CommunityClient.prototype.createTCR = function (_a) {
        var prefix = _a.prefix, decayFunction = _a.decayFunction, minDeposit = _a.minDeposit, applyStageLength = _a.applyStageLength, dispensationPercentage = _a.dispensationPercentage, commitTime = _a.commitTime, revealTime = _a.revealTime, minParticipationPct = _a.minParticipationPct, supportRequiredPct = _a.supportRequiredPct;
        return __awaiter(this, void 0, void 0, function () {
            var _b, to, data, tx;
            var _this = this;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        prefix += ':';
                        return [4 /*yield*/, this.postRequestDApps('/create-tcr', {
                                prefix: prefix,
                                decayFunction: decayFunction,
                                minDeposit: minDeposit,
                                applyStageLength: applyStageLength,
                                dispensationPercentage: dispensationPercentage,
                                commitTime: commitTime,
                                revealTime: revealTime,
                                minParticipationPct: minParticipationPct,
                                supportRequiredPct: supportRequiredPct,
                            })];
                    case 1:
                        _b = _c.sent(), to = _b.to, data = _b.data;
                        return [4 /*yield*/, this.createTransaction(to, data)];
                    case 2:
                        tx = _c.sent();
                        return [2 /*return*/, new Promise(function (resolve, reject) {
                                return tx.send().on('transactionHash', function (tx_hash) { return __awaiter(_this, void 0, void 0, function () {
                                    var log, lastEvent;
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0:
                                                if (!this.web3) {
                                                    reject();
                                                    return [2 /*return*/];
                                                }
                                                _a.label = 1;
                                            case 1:
                                                return [4 /*yield*/, this.web3.eth.getTransactionReceipt(tx_hash)];
                                            case 2:
                                                log = _a.sent();
                                                console.log(log);
                                                if (!log) return [3 /*break*/, 3];
                                                if (!log.status || !log.logs) {
                                                    reject();
                                                    return [2 /*return*/];
                                                }
                                                lastEvent = log.logs[log.logs.length - 1];
                                                resolve(this.tcr(this.web3.utils.toChecksumAddress('0x' + lastEvent.data.slice(26))));
                                                return [2 /*return*/];
                                            case 3: return [4 /*yield*/, delay(1000)];
                                            case 4:
                                                _a.sent();
                                                _a.label = 5;
                                            case 5: return [3 /*break*/, 1];
                                            case 6: return [2 /*return*/];
                                        }
                                    });
                                }); });
                            })];
                }
            });
        });
    };
    CommunityClient.prototype.createTCD = function (_a) {
        var minProviderStake = _a.minProviderStake, maxProviderCount = _a.maxProviderCount, ownerRevenuePct = _a.ownerRevenuePct, queryPrice = _a.queryPrice;
        return __awaiter(this, void 0, void 0, function () {
            var _b, to, data, tx;
            var _this = this;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4 /*yield*/, this.postRequestDApps('/create-tcd', {
                            minProviderStake: minProviderStake,
                            maxProviderCount: maxProviderCount,
                            ownerRevenuePct: ownerRevenuePct,
                            queryPrice: queryPrice,
                        })];
                    case 1:
                        _b = _c.sent(), to = _b.to, data = _b.data;
                        return [4 /*yield*/, this.createTransaction(to, data)];
                    case 2:
                        tx = _c.sent();
                        return [2 /*return*/, new Promise(function (resolve, reject) {
                                return tx.send().on('transactionHash', function (tx_hash) { return __awaiter(_this, void 0, void 0, function () {
                                    var log, lastEvent;
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0:
                                                if (!this.web3) {
                                                    reject();
                                                    return [2 /*return*/];
                                                }
                                                _a.label = 1;
                                            case 1:
                                                return [4 /*yield*/, this.web3.eth.getTransactionReceipt(tx_hash)];
                                            case 2:
                                                log = _a.sent();
                                                console.log(log);
                                                if (!log) return [3 /*break*/, 3];
                                                if (!log.status || !log.logs) {
                                                    reject();
                                                    return [2 /*return*/];
                                                }
                                                lastEvent = log.logs[log.logs.length - 1];
                                                resolve(this.tcd(this.web3.utils.toChecksumAddress('0x' + lastEvent.data.slice(26))));
                                                return [2 /*return*/];
                                            case 3: return [4 /*yield*/, delay(1000)];
                                            case 4:
                                                _a.sent();
                                                _a.label = 5;
                                            case 5: return [3 /*break*/, 1];
                                            case 6: return [2 /*return*/];
                                        }
                                    });
                                }); });
                            })];
                }
            });
        });
    };
    CommunityClient.prototype.parameter = function () {
        return new ParameterClient(this.coreAddress, this.web3);
    };
    CommunityClient.prototype.tcr = function (tcrAddress) {
        return new TCRClient(tcrAddress, this.web3);
    };
    CommunityClient.prototype.tcd = function (ddsAddress) {
        return new DDSClient(ddsAddress, this.web3);
    };
    CommunityClient.prototype.getRequestDApps = function (path, params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, InternalUtils.getRequest("/dapps/" + this.coreAddress + path, params)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    CommunityClient.prototype.postRequestDApps = function (path, data) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, InternalUtils.postRequest("/dapps/" + this.coreAddress + path, data)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return CommunityClient;
}(BaseClient));

/**
 * This is class for get balance and transfer BandToken.
 */
var BandProtocolClient = /** @class */ (function (_super) {
    __extends(BandProtocolClient, _super);
    function BandProtocolClient(web3) {
        return _super.call(this, web3) || this;
    }
    /**
     * This is function with creating
     *
     * @param args A provider's object.
     * @returns An instance of BandProtocolClient.
     */
    BandProtocolClient.make = function (args) {
        return __awaiter(this, void 0, void 0, function () {
            var web3;
            return __generator(this, function (_a) {
                if (args.provider !== undefined) {
                    web3 = new Web3(args.provider);
                    return [2 /*return*/, new BandProtocolClient(web3)];
                }
                else {
                    return [2 /*return*/, new BandProtocolClient()];
                }
                return [2 /*return*/];
            });
        });
    };
    // TODO: recheck again
    BandProtocolClient.prototype.enableEthereum = function () {
        return __awaiter(this, void 0, void 0, function () {
            var enable;
            return __generator(this, function (_a) {
                if (this.web3 === undefined) {
                    return [2 /*return*/, InternalUtils.throw('Required provider.')];
                }
                enable = this.web3.eth.requestAccounts;
                if (enable) {
                    enable();
                }
                return [2 /*return*/];
            });
        });
    };
    BandProtocolClient.prototype.createCommunity = function (_a) {
        var name = _a.name, symbol = _a.symbol, _b = _a.bonding, collateralEquation = _b.collateralEquation, liquiditySpread = _b.liquiditySpread, _c = _a.params, expirationTime = _c.expirationTime, minParticipationPct = _c.minParticipationPct, supportRequiredPct = _c.supportRequiredPct;
        return __awaiter(this, void 0, void 0, function () {
            var _d, to, data, tx;
            var _this = this;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0: return [4 /*yield*/, this.postRequestBand('/create-dapp', {
                            name: name,
                            symbol: symbol,
                            bondingCollateralEquation: collateralEquation,
                            bondingLiquiditySpread: liquiditySpread,
                            paramsExpirationTime: expirationTime,
                            paramsMinParticipationPct: minParticipationPct,
                            paramsSupportRequiredPct: supportRequiredPct,
                        })];
                    case 1:
                        _d = _e.sent(), to = _d.to, data = _d.data;
                        return [4 /*yield*/, this.createTransaction(to, data)];
                    case 2:
                        tx = _e.sent();
                        return [2 /*return*/, new Promise(function (resolve, reject) {
                                tx.send().on('transactionHash', function (tx_hash) { return __awaiter(_this, void 0, void 0, function () {
                                    var log, lastEvent;
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0:
                                                if (!this.web3) {
                                                    reject();
                                                    return [2 /*return*/];
                                                }
                                                _a.label = 1;
                                            case 1:
                                                return [4 /*yield*/, this.web3.eth.getTransactionReceipt(tx_hash)];
                                            case 2:
                                                log = _a.sent();
                                                if (!log) return [3 /*break*/, 3];
                                                if (!log.status || !log.logs) {
                                                    reject();
                                                    return [2 /*return*/];
                                                }
                                                lastEvent = log.logs[log.logs.length - 1];
                                                resolve(new CommunityClient(this.web3.utils.toChecksumAddress('0x' + lastEvent.data.slice(26)), this.web3));
                                                return [2 /*return*/];
                                            case 3: return [4 /*yield*/, delay(1000)];
                                            case 4:
                                                _a.sent();
                                                _a.label = 5;
                                            case 5: return [3 /*break*/, 1];
                                            case 6: return [2 /*return*/];
                                        }
                                    });
                                }); });
                            })];
                }
            });
        });
    };
    /**
     *
     * @param coreAddress A CommunityCore's address.
     * @returns An instance of CommunityClient.
     */
    BandProtocolClient.prototype.at = function (coreAddress) {
        return __awaiter(this, void 0, void 0, function () {
            var communityByAddress;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, InternalUtils.graphqlRequest("{\n        communityByAddress(address:\"" + coreAddress + "\") {\n          address\n      }\n    }")];
                    case 1:
                        communityByAddress = (_a.sent()).communityByAddress;
                        if (communityByAddress && communityByAddress.address === coreAddress) {
                            return [2 /*return*/, new CommunityClient(coreAddress, this.web3)];
                        }
                        return [2 /*return*/, InternalUtils.throw("This dapp contract's address is invalid.")];
                }
            });
        });
    };
    /***
     * This is a function what the user's network currently use.
     *
     * @returns A network's type.(eg. Mainnet, Ropsten and so on)
     */
    BandProtocolClient.prototype.getNetworkType = function () {
        return __awaiter(this, void 0, void 0, function () {
            var networkId;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.web3 === undefined) {
                            return [2 /*return*/, InternalUtils.throw('Required provider.')];
                        }
                        return [4 /*yield*/, this.web3.eth.net.getId()];
                    case 1:
                        networkId = _a.sent();
                        switch (networkId) {
                            case 1:
                                return [2 /*return*/, 'Mainnet'];
                            case 3:
                                return [2 /*return*/, 'Ropsten'];
                            case 4:
                                return [2 /*return*/, 'Rinkeby'];
                            case 42:
                                return [2 /*return*/, 'Kovan'];
                            default:
                                return [2 /*return*/, 'Unknown'];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * This is function that transfers BandToken.
     *
     * @param to A receiver.
     * @param value An amounts.
     */
    BandProtocolClient.prototype.createTransferTransaction = function (_a) {
        var to = _a.to, value = _a.value;
        return __awaiter(this, void 0, void 0, function () {
            var valueString, _b, bandAddress, data;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        valueString = BN.isBN(value) ? value.toString() : value;
                        return [4 /*yield*/, this.postRequestBand('/transfer', {
                                to: to,
                                value: valueString,
                            })];
                    case 1:
                        _b = _c.sent(), bandAddress = _b.to, data = _b.data;
                        return [2 /*return*/, this.createTransaction(bandAddress, data)];
                }
            });
        });
    };
    BandProtocolClient.prototype.postRequestBand = function (path, data) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, InternalUtils.postRequest("/band" + path, data)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    BandProtocolClient.setAPI = function (newAPI) {
        InternalUtils.API = newAPI;
    };
    BandProtocolClient.setGraphQlAPI = function (newGraphQlAPI) {
        InternalUtils.GRAPH_QL_API = newGraphQlAPI;
    };
    return BandProtocolClient;
}(BaseClient));

var Utils = /** @class */ (function () {
    function Utils() {
    }
    Utils.opad64 = function (x) {
        return x.length < 64 ? this.pado64('0' + x) : x;
    };
    Utils.pado64 = function (x) {
        return x.length < 64 ? this.pado64(x + '0') : x;
    };
    Utils.fromBlockchainUnit = function (value) {
        return new BigNumber(value.toString()).div(new BigNumber(1e18)).toNumber();
    };
    Utils.toBlockchainUnit = function (value) {
        return new BN(new BigNumber(value).multipliedBy(new BigNumber(1e18)).toFixed(0));
    };
    Utils.graphqlRequest = function (query) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, InternalUtils.graphqlRequest(query)];
            });
        });
    };
    return Utils;
}());

var _IPFS = require('ipfs-mini');
var ipfsClient = require('ipfs-http-client');
var bs58 = require('bs58');
var IPFS = /** @class */ (function () {
    function IPFS() {
    }
    IPFS.get = function (hexString, isJSON) {
        if (isJSON === void 0) { isJSON = false; }
        return __awaiter(this, void 0, void 0, function () {
            var cid, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cid = IPFS.toIPFSHash(hexString);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 6, , 7]);
                        if (!isJSON) return [3 /*break*/, 3];
                        return [4 /*yield*/, IPFS.ipfs.catJSON(cid)];
                    case 2: return [2 /*return*/, _a.sent()];
                    case 3: return [4 /*yield*/, IPFS.ipfs.cat(cid)];
                    case 4: return [2 /*return*/, _a.sent()];
                    case 5: return [3 /*break*/, 7];
                    case 6:
                        e_1 = _a.sent();
                        console.log('error', cid);
                        return [2 /*return*/, null];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    IPFS.set = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            var cid, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!(typeof data === 'string')) return [3 /*break*/, 2];
                        return [4 /*yield*/, IPFS.ipfs.add(data)];
                    case 1:
                        _a = _b.sent();
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, IPFS.ipfs.addJSON(data)];
                    case 3:
                        _a = _b.sent();
                        _b.label = 4;
                    case 4:
                        cid = _a;
                        return [2 /*return*/, IPFS.toHexString(cid)];
                }
            });
        });
    };
    IPFS.uploadImageToIPFS = function (dataBytes) {
        return __awaiter(this, void 0, void 0, function () {
            var hash;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, IPFS.ipfsImg.add(Buffer.from(dataBytes))];
                    case 1:
                        hash = (_a.sent())[0].hash;
                        return [2 /*return*/, IPFS.toHexString(hash)];
                }
            });
        });
    };
    IPFS.toIPFSHash = function (hexString) {
        var hexStringNo0x = hexString.startsWith('0x')
            ? hexString.slice(2)
            : hexString;
        var padedHexString = Utils.opad64(hexStringNo0x);
        return bs58.encode(Buffer.from('1220' + padedHexString, 'hex'));
    };
    IPFS.toHexString = function (ipfsHash) {
        var cidHex = bs58.decode(ipfsHash).toString('hex');
        if (cidHex.slice(0, 4) !== '1220')
            throw new Error("Invalid IPFS hash format: '" + ipfsHash + "' Expect the first character to be '1220'");
        return '0x' + cidHex.slice(4);
    };
    IPFS.ipfs = new _IPFS({
        host: 'ipfs.bandprotocol.com',
        port: 443,
        protocol: 'https',
    });
    IPFS.ipfsImg = ipfsClient({
        host: 'ipfs.bandprotocol.com',
        port: 443,
        protocol: 'https',
    });
    return IPFS;
}());

export { BandProtocolClient, IPFS, Utils };
