import Web3 from 'web3';
import BN from 'bn.js';
import BaseClient from './BaseClient';
import ParameterClient from './ParameterClient';
import TCRClient from './TCRClient';
import TCDClient from './TCDClient';
import { Address, SendToken, BuySellType, ParameterProposal, CastVote, TCRDetail, TCDDetail } from '../typing/index';
export default class CommunityClient extends BaseClient {
    private coreAddress;
    constructor(coreAddress: Address, web3?: Web3);
    getBuyPrice(amount: string | BN): Promise<BN>;
    getSellPrice(amount: string | BN): Promise<BN>;
    createTransferTransaction({ to, value }: SendToken): Promise<import("./Transaction").default>;
    createBuyTransaction({ amount, priceLimit }: BuySellType): Promise<import("./Transaction").default>;
    createSellTransaction({ amount, priceLimit }: BuySellType): Promise<import("./Transaction").default>;
    createProposeTransaction({ reasonHash, keys, values, }: ParameterProposal): Promise<import("./Transaction").default>;
    createProposalVoteTransaction({ proposalId, isAccepted }: CastVote): Promise<import("./Transaction").default>;
    createTCR({ prefix, decayFunction, minDeposit, applyStageLength, dispensationPercentage, commitTime, revealTime, minParticipationPct, supportRequiredPct, }: TCRDetail): Promise<TCRClient>;
    createTCD({ minProviderStake, maxProviderCount, ownerRevenuePct, queryPrice, }: TCDDetail): Promise<TCDClient>;
    parameter(): ParameterClient;
    tcr(tcrAddress: Address): TCRClient;
    tcd(ddsAddress: Address): TCDClient;
    private getRequestDApps;
    private postRequestDApps;
}
