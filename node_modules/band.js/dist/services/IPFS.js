var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _IPFS = require('ipfs-mini');
var ipfsClient = require('ipfs-http-client');
var bs58 = require('bs58');
import Utils from './Utils';
var IPFS = /** @class */ (function () {
    function IPFS() {
    }
    IPFS.get = function (hexString, isJSON) {
        if (isJSON === void 0) { isJSON = false; }
        return __awaiter(this, void 0, void 0, function () {
            var cid, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cid = IPFS.toIPFSHash(hexString);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 6, , 7]);
                        if (!isJSON) return [3 /*break*/, 3];
                        return [4 /*yield*/, IPFS.ipfs.catJSON(cid)];
                    case 2: return [2 /*return*/, _a.sent()];
                    case 3: return [4 /*yield*/, IPFS.ipfs.cat(cid)];
                    case 4: return [2 /*return*/, _a.sent()];
                    case 5: return [3 /*break*/, 7];
                    case 6:
                        e_1 = _a.sent();
                        console.log('error', cid);
                        return [2 /*return*/, null];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    IPFS.set = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            var cid, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!(typeof data === 'string')) return [3 /*break*/, 2];
                        return [4 /*yield*/, IPFS.ipfs.add(data)];
                    case 1:
                        _a = _b.sent();
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, IPFS.ipfs.addJSON(data)];
                    case 3:
                        _a = _b.sent();
                        _b.label = 4;
                    case 4:
                        cid = _a;
                        return [2 /*return*/, IPFS.toHexString(cid)];
                }
            });
        });
    };
    IPFS.uploadImageToIPFS = function (dataBytes) {
        return __awaiter(this, void 0, void 0, function () {
            var hash;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, IPFS.ipfsImg.add(Buffer.from(dataBytes))];
                    case 1:
                        hash = (_a.sent())[0].hash;
                        return [2 /*return*/, IPFS.toHexString(hash)];
                }
            });
        });
    };
    IPFS.toIPFSHash = function (hexString) {
        var hexStringNo0x = hexString.startsWith('0x')
            ? hexString.slice(2)
            : hexString;
        var padedHexString = Utils.opad64(hexStringNo0x);
        return bs58.encode(Buffer.from('1220' + padedHexString, 'hex'));
    };
    IPFS.toHexString = function (ipfsHash) {
        var cidHex = bs58.decode(ipfsHash).toString('hex');
        if (cidHex.slice(0, 4) !== '1220')
            throw new Error("Invalid IPFS hash format: '" + ipfsHash + "' Expect the first character to be '1220'");
        return '0x' + cidHex.slice(4);
    };
    IPFS.ipfs = new _IPFS({
        host: 'ipfs.bandprotocol.com',
        port: 443,
        protocol: 'https',
    });
    IPFS.ipfsImg = ipfsClient({
        host: 'ipfs.bandprotocol.com',
        port: 443,
        protocol: 'https',
    });
    return IPFS;
}());
export default IPFS;
