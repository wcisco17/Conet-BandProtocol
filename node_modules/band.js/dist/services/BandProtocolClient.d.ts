import BaseClient from './BaseClient';
import CommunityClient from './CommunityClient';
import { Address, CommunityDetail, SendToken } from '../typing/index';
/**
 * This is class for get balance and transfer BandToken.
 */
export default class BandProtocolClient extends BaseClient {
    private constructor();
    /**
     * This is function with creating
     *
     * @param args A provider's object.
     * @returns An instance of BandProtocolClient.
     */
    static make(args: {
        provider: any;
    }): Promise<BandProtocolClient>;
    enableEthereum(): Promise<undefined>;
    createCommunity({ name, symbol, bonding: { collateralEquation, liquiditySpread }, params: { expirationTime, minParticipationPct, supportRequiredPct }, }: CommunityDetail): Promise<CommunityClient>;
    /**
     *
     * @param coreAddress A CommunityCore's address.
     * @returns An instance of CommunityClient.
     */
    at(coreAddress: Address): Promise<CommunityClient>;
    /***
     * This is a function what the user's network currently use.
     *
     * @returns A network's type.(eg. Mainnet, Ropsten and so on)
     */
    getNetworkType(): Promise<string>;
    /**
     * This is function that transfers BandToken.
     *
     * @param to A receiver.
     * @param value An amounts.
     */
    createTransferTransaction({ to, value }: SendToken): Promise<import("./Transaction").default>;
    private postRequestBand;
    static setAPI(newAPI: string): void;
    static setGraphQlAPI(newGraphQlAPI: string): void;
}
