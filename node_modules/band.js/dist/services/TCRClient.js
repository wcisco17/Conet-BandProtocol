var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import BaseClient from './BaseClient';
import VoteClient from './VoteClient';
import InternalUtils from './InternalUtils';
import BN from 'bn.js';
var TCRClient = /** @class */ (function (_super) {
    __extends(TCRClient, _super);
    function TCRClient(tcrAddress, web3) {
        var _this = _super.call(this, web3) || this;
        _this.tcrAddress = tcrAddress;
        _this.voteClient = new VoteClient(tcrAddress, web3);
        return _this;
    }
    TCRClient.prototype.createApplyTransaction = function (_a) {
        var dataHash = _a.dataHash, amount = _a.amount;
        return __awaiter(this, void 0, void 0, function () {
            var _b, to, data, nonce, _c, _d, _e;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        _c = this.postRequestTCR;
                        _d = ['/entries'];
                        _e = {};
                        return [4 /*yield*/, this.getAccount()];
                    case 1: return [4 /*yield*/, _c.apply(this, _d.concat([(_e.sender = _f.sent(),
                                _e.dataHash = dataHash,
                                _e.deposit = BN.isBN(amount) ? amount.toString() : amount,
                                _e)]))];
                    case 2:
                        _b = _f.sent(), to = _b.to, data = _b.data, nonce = _b.nonce;
                        return [2 /*return*/, this.createTransaction(to, data, true, nonce)];
                }
            });
        });
    };
    TCRClient.prototype.createDepositTransaction = function (_a) {
        var dataHash = _a.dataHash, amount = _a.amount;
        return __awaiter(this, void 0, void 0, function () {
            var _b, to, data, nonce, _c, _d, _e;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        _c = this.postRequestTCR;
                        _d = ['/deposit'];
                        _e = {};
                        return [4 /*yield*/, this.getAccount()];
                    case 1: return [4 /*yield*/, _c.apply(this, _d.concat([(_e.sender = _f.sent(),
                                _e.dataHash = dataHash,
                                _e.amount = BN.isBN(amount) ? amount.toString() : amount,
                                _e)]))];
                    case 2:
                        _b = _f.sent(), to = _b.to, data = _b.data, nonce = _b.nonce;
                        return [2 /*return*/, this.createTransaction(to, data, true, nonce)];
                }
            });
        });
    };
    TCRClient.prototype.createWithdrawTransaction = function (_a) {
        var dataHash = _a.dataHash, amount = _a.amount;
        return __awaiter(this, void 0, void 0, function () {
            var _b, to, data, nonce, _c, _d, _e;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        _c = this.postRequestTCR;
                        _d = ['/withdraw'];
                        _e = {};
                        return [4 /*yield*/, this.getAccount()];
                    case 1: return [4 /*yield*/, _c.apply(this, _d.concat([(_e.sender = _f.sent(),
                                _e.dataHash = dataHash,
                                _e.amount = BN.isBN(amount) ? amount.toString() : amount,
                                _e)]))];
                    case 2:
                        _b = _f.sent(), to = _b.to, data = _b.data, nonce = _b.nonce;
                        return [2 /*return*/, this.createTransaction(to, data, true, nonce)];
                }
            });
        });
    };
    TCRClient.prototype.createChallengeTransaction = function (_a) {
        var entryHash = _a.entryHash, reasonHash = _a.reasonHash, amount = _a.amount;
        return __awaiter(this, void 0, void 0, function () {
            var _b, to, data, nonce, _c, _d, _e;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        _c = this.postRequestTCR;
                        _d = ['/challenge'];
                        _e = {};
                        return [4 /*yield*/, this.getAccount()];
                    case 1: return [4 /*yield*/, _c.apply(this, _d.concat([(_e.sender = _f.sent(),
                                _e.entryHash = entryHash,
                                _e.reasonHash = reasonHash,
                                _e.amount = BN.isBN(amount) ? amount.toString() : amount,
                                _e)]))];
                    case 2:
                        _b = _f.sent(), to = _b.to, data = _b.data, nonce = _b.nonce;
                        return [2 /*return*/, this.createTransaction(to, data, true, nonce)];
                }
            });
        });
    };
    TCRClient.prototype.createExitTransaction = function (dataHash) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, to, data, nonce, _b, _c, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        _b = this.postRequestTCR;
                        _c = ['/exit'];
                        _d = {};
                        return [4 /*yield*/, this.getAccount()];
                    case 1: return [4 /*yield*/, _b.apply(this, _c.concat([(_d.sender = _e.sent(),
                                _d.dataHash = dataHash,
                                _d)]))];
                    case 2:
                        _a = _e.sent(), to = _a.to, data = _a.data, nonce = _a.nonce;
                        return [2 /*return*/, this.createTransaction(to, data, true, nonce)];
                }
            });
        });
    };
    TCRClient.prototype.createCommitVoteTransaction = function (_a) {
        var challengeId = _a.challengeId, commitHash = _a.commitHash, totalWeight = _a.totalWeight;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_b) {
                return [2 /*return*/, this.voteClient.createCommitVoteTransaction(challengeId, commitHash, totalWeight)];
            });
        });
    };
    TCRClient.prototype.createRevealVoteTransaction = function (_a) {
        var challengeId = _a.challengeId, yesVote = _a.yesVote, noVote = _a.noVote, salt = _a.salt;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_b) {
                return [2 /*return*/, this.voteClient.createRevealVoteTransaction(challengeId, yesVote, noVote, salt)];
            });
        });
    };
    TCRClient.prototype.createClaimRewardTransaction = function (challengeId) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, to, data, _b, _c, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        _b = this.postRequestTCR;
                        _c = ['/claim-reward'];
                        _d = {};
                        return [4 /*yield*/, this.getAccount()];
                    case 1: return [4 /*yield*/, _b.apply(this, _c.concat([(_d.rewardOwner = _e.sent(),
                                _d.challengeId = challengeId,
                                _d)]))];
                    case 2:
                        _a = _e.sent(), to = _a.to, data = _a.data;
                        return [2 /*return*/, this.createTransaction(to, data, false)];
                }
            });
        });
    };
    TCRClient.prototype.getVotingPower = function (challengeId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.voteClient.getVotingPower(challengeId)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    TCRClient.prototype.getMinDeposit = function (entryHash) {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = BN.bind;
                        return [4 /*yield*/, this.getRequestTCR("/" + entryHash + "/min-deposit", {})];
                    case 1: return [2 /*return*/, new (_a.apply(BN, [void 0, (_b.sent()).minDeposit]))()];
                }
            });
        });
    };
    TCRClient.prototype.getRequestTCR = function (path, params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, InternalUtils.getRequest("/tcr/" + this.tcrAddress + path, params)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    TCRClient.prototype.postRequestTCR = function (path, data) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, InternalUtils.postRequest("/tcr/" + this.tcrAddress + path, data)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    TCRClient.prototype.createSalt = function (challengeId) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, _c, _d, _e, _f;
            return __generator(this, function (_g) {
                switch (_g.label) {
                    case 0:
                        if (this.web3 === undefined)
                            return [2 /*return*/, InternalUtils.throw('Required provider.')];
                        _a = BN.bind;
                        _c = (_b = this.web3.utils).soliditySha3;
                        _e = (_d = InternalUtils).signMessage;
                        _f = [this.web3,
                            this.web3.utils.asciiToHex("salt:" + this.tcrAddress + ":" + challengeId)];
                        return [4 /*yield*/, this.getAccount()];
                    case 1: return [4 /*yield*/, _e.apply(_d, _f.concat([_g.sent()]))];
                    case 2: return [2 /*return*/, new (_a.apply(BN, [void 0, _c.apply(_b, [_g.sent()])
                                .slice(2),
                            'hex']))()];
                }
            });
        });
    };
    return TCRClient;
}(BaseClient));
export default TCRClient;
