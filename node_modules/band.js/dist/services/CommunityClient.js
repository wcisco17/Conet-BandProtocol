var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import BN from 'bn.js';
import BaseClient from './BaseClient';
import ParameterClient from './ParameterClient';
import TCRClient from './TCRClient';
import InternalUtils from './InternalUtils';
var CommunityClient = /** @class */ (function (_super) {
    __extends(CommunityClient, _super);
    function CommunityClient(coreAddress, web3) {
        var _this = _super.call(this, web3) || this;
        _this.coreAddress = coreAddress;
        return _this;
    }
    CommunityClient.prototype.getBuyPrice = function (amount) {
        return __awaiter(this, void 0, void 0, function () {
            var amountString, url, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        amountString = BN.isBN(amount) ? amount.toString() : amount;
                        url = "/buy-price/" + amountString;
                        _a = BN.bind;
                        return [4 /*yield*/, this.getRequestDApps(url)];
                    case 1: return [2 /*return*/, new (_a.apply(BN, [void 0, (_b.sent()).price]))()];
                }
            });
        });
    };
    CommunityClient.prototype.getSellPrice = function (amount) {
        return __awaiter(this, void 0, void 0, function () {
            var amountString, url, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        amountString = BN.isBN(amount) ? amount.toString() : amount;
                        url = "/sell-price/" + amountString;
                        _a = BN.bind;
                        return [4 /*yield*/, this.getRequestDApps(url)];
                    case 1: return [2 /*return*/, new (_a.apply(BN, [void 0, (_b.sent()).price]))()];
                }
            });
        });
    };
    CommunityClient.prototype.createTransferTransaction = function (_a) {
        var to = _a.to, value = _a.value;
        return __awaiter(this, void 0, void 0, function () {
            var valueString, _b, tokenAddress, data, nonce, _c, _d, _e;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        valueString = BN.isBN(value) ? value.toString() : value;
                        _c = this.postRequestDApps;
                        _d = ['/transfer'];
                        _e = {};
                        return [4 /*yield*/, this.getAccount()];
                    case 1: return [4 /*yield*/, _c.apply(this, _d.concat([(_e.sender = _f.sent(),
                                _e.to = to,
                                _e.value = valueString,
                                _e)]))];
                    case 2:
                        _b = _f.sent(), tokenAddress = _b.to, data = _b.data, nonce = _b.nonce;
                        return [2 /*return*/, this.createTransaction(tokenAddress, data, true, nonce)];
                }
            });
        });
    };
    CommunityClient.prototype.createBuyTransaction = function (_a) {
        var amount = _a.amount, priceLimit = _a.priceLimit;
        return __awaiter(this, void 0, void 0, function () {
            var amountString, priceLimitString, _b, tokenAddress, data, nonce, _c, _d, _e;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        amountString = BN.isBN(amount) ? amount.toString() : amount;
                        priceLimitString = BN.isBN(priceLimit)
                            ? priceLimit.toString()
                            : priceLimit;
                        _c = this.postRequestDApps;
                        _d = ['/buy'];
                        _e = {};
                        return [4 /*yield*/, this.getAccount()];
                    case 1: return [4 /*yield*/, _c.apply(this, _d.concat([(_e.sender = _f.sent(),
                                _e.value = amountString,
                                _e.priceLimit = priceLimitString,
                                _e)]))];
                    case 2:
                        _b = _f.sent(), tokenAddress = _b.to, data = _b.data, nonce = _b.nonce;
                        return [2 /*return*/, this.createTransaction(tokenAddress, data, true, nonce)];
                }
            });
        });
    };
    CommunityClient.prototype.createSellTransaction = function (_a) {
        var amount = _a.amount, priceLimit = _a.priceLimit;
        return __awaiter(this, void 0, void 0, function () {
            var amountString, priceLimitString, _b, tokenAddress, data, nonce, _c, _d, _e;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        amountString = BN.isBN(amount) ? amount.toString() : amount;
                        priceLimitString = BN.isBN(priceLimit)
                            ? priceLimit.toString()
                            : priceLimit;
                        _c = this.postRequestDApps;
                        _d = ['/sell'];
                        _e = {};
                        return [4 /*yield*/, this.getAccount()];
                    case 1: return [4 /*yield*/, _c.apply(this, _d.concat([(_e.sender = _f.sent(),
                                _e.value = amountString,
                                _e.priceLimit = priceLimitString,
                                _e)]))];
                    case 2:
                        _b = _f.sent(), tokenAddress = _b.to, data = _b.data, nonce = _b.nonce;
                        return [2 /*return*/, this.createTransaction(tokenAddress, data, true, nonce)];
                }
            });
        });
    };
    CommunityClient.prototype.createProposeTransaction = function (_a) {
        var reasonHash = _a.reasonHash, keys = _a.keys, values = _a.values;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_b) {
                return [2 /*return*/, this.parameter().createProposalTransaction(reasonHash, keys, values)];
            });
        });
    };
    CommunityClient.prototype.createProposalVoteTransaction = function (_a) {
        var proposalId = _a.proposalId, yesVote = _a.yesVote, noVote = _a.noVote;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_b) {
                return [2 /*return*/, this.parameter().createCastVoteTransaction(proposalId, yesVote, noVote)];
            });
        });
    };
    // async deployTCR(
    //   prefix: string,
    //   params: object,
    //   minDepositEquation: (string | BN)[],
    // ) {
    //   prefix += ':'
    //   const { allContracts } = await InternalUtils.graphqlRequest(
    //     `
    //     {
    //       allContracts(condition: {contractType: "CR_VOTING"}) {
    //         nodes {
    //           address
    //         }
    //       }
    //     }`,
    //   )
    //   const voting = allContracts.nodes[0].address
    //   const { to, data } = await this.postRequestDApps('/create-tcr', {
    //     prefix,
    //     voting,
    //     minDepositEquation,
    //   })
    //   const tx = await this.createTransaction(to, data, false)
    //   await new Promise((resolve, reject) =>
    //     tx.send().on('receipt', async receipt => {
    //       if (!receipt.logs) {
    //         reject()
    //         return
    //       }
    //       const tcrAddress = receipt.logs && receipt.logs[0].data.slice(0, 66)
    //       console.log(tcrAddress)
    //       const parameterClient = this.parameter()
    //       const paramTx = await parameterClient.createProposalTransaction(
    //         await IPFS.set(
    //           JSON.stringify({
    //             title: `Initialize parameter for tcr with prefix ${prefix}`,
    //             reason: `Initialize parameter for new tcr address ${'0x' +
    //               tcrAddress.slice(26)}.`,
    //           }),
    //         ),
    //         [
    //           ...Object.keys(params).map(key => prefix + key),
    //           `${prefix}tcr_address`,
    //         ],
    //         [...Object.values(params), tcrAddress],
    //       )
    //       paramTx.send().on('receipt', _ => {
    //         resolve('0x' + tcrAddress.slice(26))
    //       })
    //     }),
    //   )
    // }
    CommunityClient.prototype.parameter = function () {
        return new ParameterClient(this.coreAddress, this.web3);
    };
    CommunityClient.prototype.tcr = function (tcrAddress) {
        return new TCRClient(tcrAddress, this.web3);
    };
    CommunityClient.prototype.getRequestDApps = function (path, params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, InternalUtils.getRequest("/dapps/" + this.coreAddress + path, params)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    CommunityClient.prototype.postRequestDApps = function (path, data) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, InternalUtils.postRequest("/dapps/" + this.coreAddress + path, data)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return CommunityClient;
}(BaseClient));
export default CommunityClient;
