import BaseClient from './BaseClient';
import Web3 from 'web3';
import BN from 'bn.js';
import { Address, EntryWithStake, ChallengeInit, CommitVote, RevealVote } from '../typing/index';
export default class TCRClient extends BaseClient {
    private tcrAddress;
    constructor(tcrAddress: Address, web3?: Web3);
    createApplyTransaction({ dataHash, amount }: EntryWithStake): Promise<import("./Transaction").default>;
    createDepositTransaction({ dataHash, amount }: EntryWithStake): Promise<import("./Transaction").default>;
    createWithdrawTransaction({ dataHash, amount }: EntryWithStake): Promise<import("./Transaction").default>;
    createChallengeTransaction({ entryHash, reasonHash, amount, }: ChallengeInit): Promise<import("./Transaction").default>;
    createExitTransaction(dataHash: string): Promise<import("./Transaction").default>;
    createCommitVoteTransaction({ challengeId, commitHash }: CommitVote): Promise<import("./Transaction").default>;
    createRevealVoteTransaction({ challengeId, voteKeep, salt, }: RevealVote): Promise<import("./Transaction").default>;
    createClaimRewardTransaction(challengeId: number): Promise<import("./Transaction").default>;
    getMinDeposit(entryHash: string): Promise<BN>;
    private getRequestTCR;
    private postRequestTCR;
    createSalt(challengeId: number): Promise<BN>;
}
