var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import BN from 'bn.js';
import Web3 from 'web3';
// import { Provider } from 'web3/providers'  TODO: bring back provider type
import BaseClient from './BaseClient';
import CommunityClient from './CommunityClient';
import InternalUtils from './InternalUtils';
import IPFS from './IPFS';
/**
 * This is class for get balance and transfer BandToken.
 */
var BandProtocolClient = /** @class */ (function (_super) {
    __extends(BandProtocolClient, _super);
    function BandProtocolClient(web3) {
        return _super.call(this, web3) || this;
    }
    /**
     * This is function with creating
     *
     * @param args A provider's object.
     * @returns An instance of BandProtocolClient.
     */
    BandProtocolClient.make = function (args) {
        return __awaiter(this, void 0, void 0, function () {
            var web3;
            return __generator(this, function (_a) {
                if (args.provider !== undefined) {
                    web3 = new Web3(args.provider);
                    return [2 /*return*/, new BandProtocolClient(web3)];
                }
                else {
                    return [2 /*return*/, new BandProtocolClient()];
                }
                return [2 /*return*/];
            });
        });
    };
    // TODO: recheck again
    BandProtocolClient.prototype.enableEthereum = function () {
        return __awaiter(this, void 0, void 0, function () {
            var enable;
            return __generator(this, function (_a) {
                if (this.web3 === undefined) {
                    return [2 /*return*/, InternalUtils.throw('Required provider.')];
                }
                enable = this.web3.eth.requestAccounts;
                if (enable) {
                    enable();
                }
                return [2 /*return*/];
            });
        });
    };
    BandProtocolClient.prototype.createCommunity = function (_a) {
        var name = _a.name, symbol = _a.symbol, _b = _a.info, logo = _b.logo, banner = _b.banner, description = _b.description, website = _b.website, organization = _b.organization, _c = _a.bonding, collateralEquation = _c.collateralEquation, liquiditySpread = _c.liquiditySpread, _d = _a.params, expirationTime = _d.expirationTime, minParticipationPct = _d.minParticipationPct, supportRequiredPct = _d.supportRequiredPct;
        return __awaiter(this, void 0, void 0, function () {
            var _e, to, data, _f, _g, _h, tx;
            var _this = this;
            return __generator(this, function (_j) {
                switch (_j.label) {
                    case 0:
                        _f = this.postRequestBand;
                        _g = ['/create-dapp'];
                        _h = {
                            name: name,
                            symbol: symbol,
                            decimal: 18,
                            logo: IPFS.toHexString(logo),
                            banner: IPFS.toHexString(banner)
                        };
                        return [4 /*yield*/, IPFS.set(description)];
                    case 1:
                        _h.description = _j.sent();
                        return [4 /*yield*/, IPFS.set(website)];
                    case 2:
                        _h.website = _j.sent();
                        return [4 /*yield*/, IPFS.set(organization)];
                    case 3: return [4 /*yield*/, _f.apply(this, _g.concat([(_h.organization = _j.sent(),
                                _h.collateralEquation = collateralEquation,
                                _h.liquiditySpread = liquiditySpread,
                                _h.expirationTime = expirationTime,
                                _h.minParticipationPct = minParticipationPct,
                                _h.supportRequiredPct = supportRequiredPct,
                                _h)]))];
                    case 4:
                        _e = _j.sent(), to = _e.to, data = _e.data;
                        return [4 /*yield*/, this.createTransaction(to, data, false)];
                    case 5:
                        tx = _j.sent();
                        return [2 /*return*/, new Promise(function (resolve, reject) {
                                tx.send().on('receipt', function (receipt) {
                                    console.log(receipt);
                                    if (!receipt.logs) {
                                        reject();
                                        return;
                                    }
                                    console.log(receipt.logs);
                                    var coreAddress = receipt.logs && receipt.logs[0].data.slice(0, 66);
                                    console.log(coreAddress);
                                    resolve(new CommunityClient(coreAddress, _this.web3));
                                });
                            })];
                }
            });
        });
    };
    /**
     *
     * @param coreAddress A CommunityCore's address.
     * @returns An instance of CommunityClient.
     */
    BandProtocolClient.prototype.at = function (coreAddress) {
        return __awaiter(this, void 0, void 0, function () {
            var communityByAddress;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, InternalUtils.graphqlRequest("{\n        communityByAddress(address:\"" + coreAddress + "\") {\n          address\n      }\n    }")];
                    case 1:
                        communityByAddress = (_a.sent()).communityByAddress;
                        if (communityByAddress && communityByAddress.address === coreAddress) {
                            return [2 /*return*/, new CommunityClient(coreAddress, this.web3)];
                        }
                        return [2 /*return*/, InternalUtils.throw("This dapp contract's address is invalid.")];
                }
            });
        });
    };
    /***
     * This is a function what the user's network currently use.
     *
     * @returns A network's type.(eg. Mainnet, Ropsten and so on)
     */
    BandProtocolClient.prototype.getNetworkType = function () {
        return __awaiter(this, void 0, void 0, function () {
            var networkId;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.web3 === undefined) {
                            return [2 /*return*/, InternalUtils.throw('Required provider.')];
                        }
                        return [4 /*yield*/, this.web3.eth.net.getId()];
                    case 1:
                        networkId = _a.sent();
                        switch (networkId) {
                            case 1:
                                return [2 /*return*/, 'Mainnet'];
                            case 3:
                                return [2 /*return*/, 'Ropsten'];
                            case 4:
                                return [2 /*return*/, 'Rinkeby'];
                            case 42:
                                return [2 /*return*/, 'Kovan'];
                            default:
                                return [2 /*return*/, 'Unknown'];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * This is function that transfers BandToken.
     *
     * @param to A receiver.
     * @param value An amounts.
     */
    BandProtocolClient.prototype.createTransferTransaction = function (_a) {
        var to = _a.to, value = _a.value;
        return __awaiter(this, void 0, void 0, function () {
            var valueString, _b, bandAddress, data, nonce, _c, _d, _e;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        valueString = BN.isBN(value) ? value.toString() : value;
                        _c = this.postRequestBand;
                        _d = ['/transfer'];
                        _e = {};
                        return [4 /*yield*/, this.getAccount()];
                    case 1: return [4 /*yield*/, _c.apply(this, _d.concat([(_e.sender = _f.sent(),
                                _e.to = to,
                                _e.value = valueString,
                                _e)]))];
                    case 2:
                        _b = _f.sent(), bandAddress = _b.to, data = _b.data, nonce = _b.nonce;
                        return [2 /*return*/, this.createTransaction(bandAddress, data, true, nonce)];
                }
            });
        });
    };
    BandProtocolClient.prototype.postRequestBand = function (path, data) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, InternalUtils.postRequest("/band" + path, data)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    BandProtocolClient.setAPI = function (newAPI) {
        InternalUtils.API = newAPI;
    };
    BandProtocolClient.setGraphQlAPI = function (newGraphQlAPI) {
        InternalUtils.GRAPH_QL_API = newGraphQlAPI;
    };
    return BandProtocolClient;
}(BaseClient));
export default BandProtocolClient;
